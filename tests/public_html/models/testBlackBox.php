<?php

namespace alimmvc\tests\public_html\models;

use alimmvc\core\models;
use alimmvc\core\registry;
use alimmvc\public_html\models\recoverDnk;

class testBlackBox extends models
{
	const tableTest = [
		// Это техника, которая заключается в разбиении всего набора тестов на классы эквивалентности с последующим сокращением числа тестов.
		// Классы эквивалентности
		// 1) фрагменты по порядку
		["АГЦЦ-ЦЦГГУ-ГГУАА-УААЦ", "АГЦЦГГУААЦ"],
        // 2) фрагменты не по порядку
        ["ГГУАА-АГЦЦ-ЦЦГГУ-УААЦ", "АГЦЦГГУААЦ"],
		// 3) проверка соединения всех допустимых букв 
		["ЦЦ-ЦЦГГ-ГГУУ-УУАА-АА", "ЦЦГГУУАА"],
		// 4) если фрагменты можно восстановить несколько раз
		["ГУГУ-ГУ", false],
		// 5) пустая строка
        ["", false],
       	// 6) Недопустимые символы
        ["fdnkfdnln", false],
       	// 7) Недопустимые символы + допустимые
        ["УАГЦ-РРПНЫ", false],

		// Граничные условия
		// 1) соединение по двум символам (минимум)
        ["ЦУГ-УГЦА", "ЦУГЦА"],
		// 2) соединение по всем сиволам (максимум)
        ["УГЦАА-УГЦАА", "УГЦАА"],
		// 3) соединение по 3м сиволам
        ["ЦЦГГУ-ГГУАА", "ЦЦГГУАА"],
		// 4) соединение по одному символу
        ["АУЦ-ЦУУ", false],
        // 5) на входе 1 фрагмент
        ["ЦУГ", "ЦУГ"],
        // 6) на входе больше 3х фрагментов
        ["ЦУГ-УГАЦА-ЦАА-ААЦ", "ЦУГАЦААЦ"],
        // 7) соединение по 1му символу
	];

	public function startTest()
	{
		$result = array();
		foreach (self::tableTest as $key => $value) 
		{
			$recoverDnk = new recoverDnk();
			if ($recoverDnk->recover($value[0]) == $value[1])
			{
				$result[][0] = true;
				$result[sizeof($result)-1][1] = "(success): " . $value[0] . " = " . (($value[1])?$value[1]:"false") . "<br>";
			} else {
				$result[][0] = false;
				$result[sizeof($result)-1][1] = "(error): " . $value[0] . " = " . (($value[1])?$value[1]:"false") . "<br>";
			}
		}

		return $result;
	}
}